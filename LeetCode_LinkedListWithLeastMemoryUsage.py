class Node():
    def __init__(self,val):
        self.val = val
        self.next = None
        #print("Node is initialized")
        
class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.Head = None
        #print("Linked List is intialized")
        

    def get(self, index: int) -> int:
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        print("\tGet value at index :{}".format(index))
        if self.Head is None:
            print("\t\tLinked List is empty")
        else:
            itr = 0
            n = self.Head
            while n is not None:
                #print("itr-{},index:{}".format(itr,index))
                if itr == index:
                    print("return {}".format(n.val))
                    return n.val
                n = n.next
                itr += 1
        print("\treturn -1")
        return -1
                
    def addAtHead(self, val: int) -> None:
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        print("\tAdd value-{} at head".format(val))
        if self.Head is None:
            self.Head = Node(val)
            self.next = None
        else:
            n = Node(val)
            n.next = self.Head 
            self.Head = n
        #self.printLinkedList()

    def addAtTail(self, val: int) -> None:
        """
        Append a node of value val to the last element of the linked list.
        """
        print("\tAdd value-{} at tail".format(val))
        n = self.Head
        while n.next is not None:
            n = n.next
        n1 = Node(val)
        n.next = n1
        n1.next = None
        #self.printLinkedList()
        

    def addAtIndex(self, index: int, val: int) -> None:
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        print("\tAdd val-{} at index-{}".format(val,index))
        if self.Head is None:
            if index == 0:
                #print("Linked list is currently empty, Adding {} as the first element".format(val))
                n = Node(val)
                self.Head = n
                n.next = None
            else:
                print("\t\tLinked list is empty and index provided is invalid")
        else:
            i = 0
            n = self.Head
            prev = self.Head
            n1 = Node(val)
            while n is not None or prev is not None:
                if i == index:
                    if index == 0:
                        self.Head = n1
                        n1.next = n
                        break
                    else:
                        n1.next = prev.next 
                        prev.next = n1
                        break
                else:
                    prev = n
                    n = n.next 
                    i += 1
        #self.printLinkedList()
            
        

    def deleteAtIndex(self, index: int) -> None:
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        print("\tDelete value from index-{}".format(index))
        if self.Head is None:
            print("\t\tEmpty Linked List")
        else:
            n = self.Head
            prev = self.Head
            i = 0
            while n.next is not None:
                #print("self.index:",self.index)
                if i == index:
                    if index == 0:
                        if n.next.next is not None:
                            n.val = n.next.val
                            n.next = n.next.next
                            self.Head = n
                            break
                        else:
                            self.Head = None
                            break
                    else:
                        prev.next = n.next
                        break
                else:
                    prev = n
                    n = n.next
                    i += 1
            #self.printLinkedList()
        
        
    def printLinkedList(self):
        if self.Head is None:
            print("Empty Linked List")
        else:
            n = self.Head
            while n is not None:
                print("{}->".format(n.val),end="")
                n = n.next
            print("Null")
                
L = MyLinkedList()
L.addAtIndex(0,10)
L.addAtIndex(0,20)
L.addAtIndex(1,30)
L.get(0)
L.addAtHead(171)
L.addAtHead(733)
L.addAtHead(411)
L.get(1)
L.addAtIndex(1,390)
L.addAtIndex(4,801)
L.deleteAtIndex(2)
L.get(2)
L.addAtTail(277)
L.get(4)
L.addAtHead(354)
L.addAtTail(188)
L.addAtIndex(5,239)
L.addAtIndex(3,390)
L.addAtHead(269)
L.addAtHead(443)
L.addAtTail(104)
L.deleteAtIndex(9)
L.deleteAtIndex(5)
L.get(8)
L.get(3)
L.get(8)
L.addAtHead(116)
L.deleteAtIndex(11)
L.deleteAtIndex(11)
L.get(9)
L.addAtIndex(11,747)
L.addAtTail(775)
L.addAtHead(105)
L.addAtHead(724)
L.addAtTail(287)
L.addAtTail(739)
L.get(3)
L.addAtTail(773)
L.addAtHead(730)
L.addAtHead(48)
L.addAtHead(831)
L.addAtTail(85)
L.addAtHead(649)
L.addAtHead(234)
L.addAtIndex(7,204)
L.addAtTail(877)
L.get(7)
L.addAtIndex(1,945)
L.get(2)
L.addAtHead(803)
L.addAtTail(268)
L.addAtHead(207)
L.addAtHead(145)
L.addAtHead(215)
L.get(8)
L.addAtTail(737)
L.get(21)
L.addAtTail(773)
L.addAtTail(701)
L.deleteAtIndex(19)
L.addAtHead(68)
L.addAtTail(498)
L.addAtHead(561)
L.addAtTail(910)
L.addAtIndex(5,578)
L.addAtTail(648)
L.addAtIndex(23,789)
L.addAtHead(508)
L.get(12)
L.addAtTail(672)
L.addAtIndex(29,739)
L.addAtHead(151)
L.addAtTail(320)
L.addAtHead(299)
L.addAtHead(720)
L.get(48)
L.get(33)
L.addAtIndex(11,937)
L.addAtTail(951)
L.deleteAtIndex(44)
L.addAtIndex(27,806)
L.addAtTail(772)
L.deleteAtIndex(16)
L.addAtIndex(46,215)
L.get(49)
L.deleteAtIndex(4)
L.addAtHead(344)
L.addAtIndex(26,66)
L.addAtHead(302)
L.get(22)
L.addAtIndex(8,317)
L.get(48)
L.addAtHead(962)
L.addAtTail(758)
L.addAtHead(200)
L.addAtHead(558)
L.addAtHead(225)
L.addAtTail(655)
L.addAtHead(486)
L.addAtTail(944)
L.addAtHead(144)
L.deleteAtIndex(58)
L.addAtIndex(47,276)
#L.printLinkedList()
print("******************************************************************************COMPLETED 100 test cases")
L.addAtTail(454)
L.addAtHead(712)
L.addAtTail(16)
L.get(19)
L.addAtIndex(5,236)
L.get(25)
L.addAtHead(958)
L.addAtHead(688)
L.addAtHead(723)
L.addAtTail(183)
L.addAtTail(435)
L.addAtHead(380)
L.addAtHead(760)
L.addAtIndex(46,157)
L.addAtTail(937)
L.get(44)
L.deleteAtIndex(65)
L.get(68)
L.addAtHead(946)
L.addAtIndex(35,377)
L.get(18)
L.addAtHead(124)
L.addAtIndex(22,690)
L.addAtIndex(30,616)
L.addAtTail(498)
L.addAtHead(811)
L.addAtTail(986)
L.addAtTail(890)
L.addAtHead(791)
L.addAtIndex(85,372)
L.addAtHead(223)
L.addAtIndex(42,0)
L.addAtTail(887)
L.addAtIndex(89,819)
L.addAtIndex(54,797)
L.addAtHead(165)
L.deleteAtIndex(69)
L.addAtTail(739)
L.addAtHead(410)
L.addAtTail(524)
L.addAtHead(673)
L.addAtIndex(37,588)
L.addAtHead(555)
L.addAtTail(846)
L.addAtIndex(61,476)
L.addAtIndex(98,191)
L.addAtTail(418)
L.addAtIndex(73,357)
L.get(8)
L.addAtTail(688)
L.get(76)
L.addAtHead(534)
L.deleteAtIndex(48)
L.addAtIndex(95,760)
L.addAtIndex(102,943)
L.deleteAtIndex(18)
L.addAtTail(112)
L.deleteAtIndex(77)
L.get(77)
L.deleteAtIndex(91)
L.get(73)
L.addAtHead(594)
L.addAtTail(450)
L.addAtHead(546)
L.addAtHead(243)
L.get(17)
L.deleteAtIndex(23)
L.addAtTail(593)
L.get(59)
L.addAtHead(191)
L.addAtHead(762)
L.deleteAtIndex(12)
L.get(17)
L.get(45)
L.deleteAtIndex(86)
L.addAtTail(963)
L.addAtHead(889)
L.addAtHead(112)
L.addAtTail(461)
L.addAtIndex(42,517)
L.addAtHead(403)
L.addAtIndex(84,577)
L.addAtIndex(107,117)
L.addAtHead(510)
L.addAtTail(527)
L.deleteAtIndex(15)
L.deleteAtIndex(6)
L.addAtHead(798)
L.addAtIndex(29,269)
L.addAtTail(805)
L.addAtIndex(47,545)
L.addAtTail(769)
L.get(35)
L.get(117)
L.addAtTail(500)
L.get(3)
L.addAtTail(737)
L.addAtHead(687)
L.addAtTail(752)
L.get(80)
#L.printLinkedList()
print("****************************************************************************COMPLETED 200 TEST CASES")
L.get(105)
L.addAtHead(192)
L.addAtIndex(54,412)
L.addAtHead(719)
L.addAtTail(653)
L.addAtIndex(107,61)
L.deleteAtIndex(25)
L.addAtHead(182)
L.addAtTail(853)
L.addAtHead(795)
L.addAtTail(45)
L.addAtTail(445)
L.addAtTail(550)
L.get(39)
L.addAtTail(433)
L.addAtTail(551)
L.addAtTail(138)
L.addAtTail(924)
L.addAtTail(146)
L.addAtTail(935)
L.addAtHead(178)
L.addAtHead(237)
L.addAtTail(557)
L.addAtTail(61)
L.addAtTail(490)
L.addAtTail(488)
L.deleteAtIndex(133)
L.deleteAtIndex(96)
L.addAtTail(944)
L.addAtTail(394)
L.get(35)
L.addAtIndex(74,949)
L.addAtTail(853)
L.addAtHead(154)
L.addAtTail(647)
L.deleteAtIndex(23)
L.deleteAtIndex(114)
L.addAtHead(445)
L.addAtHead(678)
L.addAtTail(793)
L.addAtIndex(151,573)
L.addAtHead(700)
L.get(22)
L.addAtTail(736)
L.addAtTail(632)
L.addAtTail(953)
L.addAtIndex(156,91)
L.addAtIndex(25,55)
L.addAtHead(815)
L.addAtHead(490)
L.addAtHead(289)
L.addAtHead(961)
L.deleteAtIndex(157)
L.deleteAtIndex(152)
L.addAtHead(909)
L.addAtIndex(35,383)
L.addAtHead(872)
L.addAtTail(907)
L.addAtTail(987)
L.get(94)
L.addAtTail(335)
L.addAtIndex(40,425)
L.get(11)
L.addAtTail(314)
L.addAtIndex(134,139)
L.addAtTail(450)
L.addAtHead(787)
L.addAtHead(984)
L.addAtHead(434)
L.get(47)
L.addAtHead(601)
L.addAtTail(516)
L.addAtHead(41)
L.addAtTail(38)
L.deleteAtIndex(103)
L.addAtIndex(54,997)
L.addAtHead(690)
L.addAtIndex(85,439)
L.addAtTail(88)
L.addAtTail(8)
L.addAtTail(776)
L.get(170)
L.addAtIndex(68,265)
L.addAtIndex(170,762)
L.get(20)
L.addAtHead(388)
L.addAtTail(835)
L.get(32)
L.addAtHead(285)
L.get(154)
L.addAtHead(54)
L.addAtHead(266)
L.addAtTail(559)
L.addAtHead(154)
L.get(79)
L.get(189)
L.addAtTail(883)
L.addAtIndex(64,181)
L.addAtTail(780)
L.addAtIndex(39,95)
#L.printLinkedList()
print("****************************************************************************COMPLETED 300 TEST CASES")
L.addAtTail(378)
L.addAtHead(648)
L.addAtTail(79)
L.addAtIndex(119,864)
L.addAtHead(573)
L.get(193)
L.addAtIndex(80,150)
L.addAtTail(303)
L.addAtIndex(66,231)
L.addAtIndex(49,641)
L.addAtTail(121)
L.addAtHead(767)
L.addAtTail(113)
L.get(148)
L.addAtHead(75)
L.addAtHead(54)
L.addAtHead(561)
L.addAtTail(739)
L.addAtHead(31)
L.get(212)
L.get(4)
L.addAtHead(894)
L.addAtIndex(203,202)
L.addAtTail(792)
L.addAtIndex(150,392)
L.deleteAtIndex(189)
L.deleteAtIndex(42)
L.addAtTail(397)
L.addAtIndex(101,732)
L.get(12)
L.get(125)
L.addAtHead(773)
L.deleteAtIndex(178)
L.deleteAtIndex(116)
L.addAtTail(559)
L.addAtTail(653)
L.addAtTail(226)
L.get(146)
L.addAtIndex(12,547)
L.addAtTail(919)
L.addAtIndex(131,868)
L.deleteAtIndex(98)
L.get(126)
L.addAtIndex(191,841)
L.addAtHead(430)
L.addAtTail(834)
L.deleteAtIndex(25)
L.addAtTail(918)
L.addAtTail(798)
L.addAtHead(511)
L.get(90)
L.addAtIndex(188,779)
L.addAtIndex(164,566)
L.addAtTail(746)
L.deleteAtIndex(117)
L.addAtIndex(216,768)
L.addAtHead(901)
L.addAtIndex(22,275)
L.addAtHead(668)
L.get(98)
L.addAtHead(510)
L.addAtHead(242)
L.addAtIndex(160,767)
L.get(125)
L.get(89)
L.addAtTail(588)
L.addAtHead(303)
L.addAtIndex(61,773)
L.addAtIndex(79,881)
L.deleteAtIndex(191)
L.addAtTail(100)
L.get(192)
L.get(90)
L.addAtTail(147)
L.addAtTail(838)
L.addAtIndex(54,323)
L.deleteAtIndex(156)
L.addAtIndex(123,53)
L.deleteAtIndex(125)
L.addAtTail(397)
L.addAtTail(152)
L.addAtTail(799)
L.deleteAtIndex(110)
L.addAtHead(210)
L.addAtHead(79)
L.addAtIndex(218,923)
L.addAtTail(139)
L.addAtIndex(186,252)
L.addAtTail(627)
L.addAtHead(375)
L.get(37)
L.addAtHead(186)
L.addAtHead(835)
L.addAtTail(531)
L.addAtTail(242)
L.get(41)
L.addAtHead(228)
L.get(154)
L.deleteAtIndex(84)
L.addAtHead(208)
#L.printLinkedList()
print("****************************************************************************COMPLETED 400 TEST CASES")
L.addAtTail(887)
L.addAtIndex(61,409)
L.deleteAtIndex(156)
L.addAtHead(192)
L.addAtTail(555)
L.addAtHead(439)
L.get(214)
L.addAtHead(18)
L.addAtTail(484)
L.addAtIndex(125,391)
L.get(54)
L.get(260)
L.addAtIndex(171,63)
L.addAtIndex(239,565)
L.addAtTail(781)
L.get(263)
L.deleteAtIndex(20)
L.addAtIndex(39,847)
L.addAtTail(480)
L.get(23)
L.addAtIndex(79,499)
L.addAtHead(307)
L.addAtIndex(178,371)
L.addAtHead(569)
L.addAtTail(740)
L.addAtTail(249)
L.addAtHead(709)
L.get(35)
L.addAtTail(47)
L.addAtTail(196)
L.addAtHead(90)
L.get(71)
L.addAtHead(553)
L.addAtHead(213)
L.addAtHead(267)
L.get(36)
L.addAtIndex(17,146)
L.addAtHead(841)
L.get(116)
L.addAtHead(315)
L.addAtIndex(46,314)
L.get(94)
L.addAtTail(598)
L.deleteAtIndex(218)
L.deleteAtIndex(194)
L.addAtIndex(10,979)
L.addAtIndex(78,508)
L.addAtHead(130)
L.addAtTail(558)
L.get(185)
L.addAtTail(41)
L.get(50)
L.addAtTail(407)
L.addAtTail(690)
L.get(196)
L.addAtHead(247)
L.addAtIndex(266,500)
L.addAtHead(445)
L.addAtTail(933)
L.addAtHead(685)
L.get(123)
L.addAtHead(924)
L.addAtTail(380)
L.addAtHead(308)
L.addAtTail(967)
L.addAtHead(257)
L.addAtHead(797)
L.addAtIndex(181,922)
L.addAtIndex(37,783)
L.addAtIndex(195,92)
L.deleteAtIndex(123)
L.addAtHead(241)
L.addAtTail(299)
L.addAtHead(229)
L.addAtHead(788)
L.addAtHead(99)
L.addAtTail(420)
L.addAtTail(607)
L.addAtTail(815)
L.addAtHead(358)
L.addAtIndex(20,113)
L.deleteAtIndex(74)
L.deleteAtIndex(163)
L.addAtTail(306)
L.deleteAtIndex(66)
L.addAtTail(599)
L.addAtTail(823)
L.addAtTail(866)
L.addAtHead(539)
L.deleteAtIndex(68)
L.addAtIndex(254,137)
L.addAtTail(711)
L.addAtHead(213)
L.addAtTail(70)
L.deleteAtIndex(159)
L.addAtTail(698)
L.addAtTail(891)
L.addAtHead(875)
L.get(94)
L.printLinkedList()
